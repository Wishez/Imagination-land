@import url("https://fonts.googleapis.com/css?family=PT+Sans:400,700");
.bigButton {
  background-color: #FDD349; }

.imageContainer {
  position: relative; }

.closeButton {
  position: absolute; }

.navListItem {
  display: inline-block; }

.imageContainer {
  opacity: 0; }

.closeButton {
  opacity: 0.5; }

.closeButton:hover, .imageContainer_fadeIn {
  opacity: 1; }

.imageContainer, .bigButton {
  border-radius: 2px; }

h3, .header {
  font-size: 1.16667em; }

@media (max-width: 800px) {
  .closeButton {
    font-size: 1.16667em; } }

.bigButton {
  font-weight: bold; }

.bigButton {
  transition: color 0.6s, background 0.5s, transform 0.5s, opacity 0.5s; }
  .bigButton:active {
    transform: translateY(3px); }

.closeButton {
  transition: color 0.6s, background 0.5s, opacity 0.7s, transform 0.5s; }

.imageContainer_fadeIn {
  transition: opacity 1.5s; }

.bigButton {
  padding: 10px 0; }
  .bigButton:hover {
    background-color: #fcc717;
    color: #3b3b3b; }

.closeButton {
  top: -20px;
  right: -20px;
  padding: 5px 10px;
  border: 2px solid #212121;
  border-radius: 50%;
  line-height: 100%;
  transform: none; }
  @media (max-width: 800px) {
    .closeButton {
      padding-top: 3px; } }
  .closeButton:hover {
    transform: rotate(25deg); }

body {
  background-color: #f7f7f7;
  padding: 5% 0;
  font-size: 18px;
  line-height: 135%;
  font-family: 'PT Sans', sans-serif; }
  body * {
    margin: 0;
    border: 0;
    padding: 0;
    outline-color: #6F95B5; }
    body *, body *::after, body *::before {
      box-sizing: border-box; }

.styleCard, .singleStyleImageContainer__button, .orderFormContainer {
  color: #f7f7f7; }

.styleCardPresentation__number, .bigButton {
  color: #212121; }

h3, .header {
  margin-top: 1.5em; }

p, .listArticlesItem__paragraph, .word {
  margin-top: 1em; }

.navListItem {
  width: 15.25424%;
  padding: 0 0.5em 1em; }

.main {
  padding-top: 5%; }

.removeWord {
  cursor: pointer; }

.filterPluginAlert {
  font-size: 18px;
  padding: 1em 2em; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
